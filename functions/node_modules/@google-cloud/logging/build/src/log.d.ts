/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { CallOptions } from 'google-gax';
import { google } from '../protos/protos';
import { GetEntriesCallback, GetEntriesResponse, Logging } from '.';
import { Entry, EntryJson, LogEntry } from './entry';
export interface GetEntriesRequest {
    autoPaginate?: boolean;
    filter?: string;
    gaxOptions?: CallOptions;
    log?: string;
    maxApiCalls?: number;
    maxResults?: number;
    orderBy?: string;
    pageSize?: number;
    pageToken?: string;
    resourceNames?: string[] | string;
}
export interface LogOptions {
    removeCircular?: boolean;
    maxEntrySize?: number;
}
export declare type Metadata = any;
export declare type ApiResponse = [Metadata];
export interface ApiResponseCallback {
    (err: Error | null, apiResponse?: Metadata): void;
}
export declare type DeleteCallback = ApiResponseCallback;
export declare type MonitoredResource = google.api.IMonitoredResource;
export interface WriteOptions {
    dryRun?: boolean;
    gaxOptions?: CallOptions;
    labels?: {
        [index: string]: string;
    };
    partialSuccess?: boolean;
    resource?: MonitoredResource;
}
export declare enum Severity {
    emergency = 0,
    alert = 1,
    critical = 2,
    error = 3,
    warning = 4,
    notice = 5,
    info = 6,
    debug = 7
}
export declare type SeverityNames = keyof typeof Severity;
declare type LogSeverityFunctions = {
    [P in SeverityNames]: Function;
};
/**
 * A log is a named collection of entries, each entry representing a timestamped
 * event. Logs can be produced by Google Cloud Platform services, by third-party
 * services, or by your applications. For example, the log `apache-access` is
 * produced by the Apache Web Server, but the log
 * `compute.googleapis.com/activity_log` is produced by Google Compute Engine.
 *
 * @see [Introduction to Logs]{@link https://cloud.google.com/logging/docs/basic-concepts#logs}
 *
 * @class
 *
 * @param {Logging} logging {@link Logging} instance.
 * @param {string} name Name of the log.
 * @param {object} [options] Configuration object.
 * @param {boolean} [options.removeCircular] Replace circular references in
 *     logged objects with a string value, `[Circular]`. (Default: false)
 *
 * @example
 * const {Logging} = require('@google-cloud/logging');
 * const logging = new Logging();
 * const log = logging.log('syslog');
 */
declare class Log implements LogSeverityFunctions {
    formattedName_: string;
    removeCircular_: boolean;
    maxEntrySize?: number;
    logging: Logging;
    name: string;
    constructor(logging: Logging, name: string, options?: LogOptions);
    alert(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    alert(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    alert(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    critical(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    critical(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    critical(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    debug(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    debug(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    debug(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    delete(gaxOptions?: CallOptions): Promise<ApiResponse>;
    delete(gaxOptions: CallOptions, callback: DeleteCallback): void;
    delete(callback: DeleteCallback): void;
    emergency(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    emergency(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    entry(metadata?: LogEntry): Entry;
    entry(data?: string | {}): Entry;
    entry(metadata?: LogEntry, data?: string | {}): Entry;
    error(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    error(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    error(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    getEntries(options?: GetEntriesRequest): Promise<GetEntriesResponse>;
    getEntries(callback: GetEntriesCallback): void;
    getEntries(options: GetEntriesRequest, callback: GetEntriesCallback): void;
    /**
     * This method is a wrapper around {module:logging#getEntriesStream}, but with
     * a filter specified to only return {module:logging/entry} objects from this
     * log.
     *
     * @method Log#getEntriesStream
     * @param {GetEntriesRequest} [query] Query object for listing entries.
     * @returns {ReadableStream} A readable stream that emits {@link Entry}
     *     instances.
     *
     * @example
     * const {Logging} = require('@google-cloud/logging');
     * const logging = new Logging();
     * const log = logging.log('my-log');
     *
     * log.getEntriesStream()
     *   .on('error', console.error)
     *   .on('data', entry => {
     *     // `entry` is a Stackdriver Logging entry object.
     *     // See the `data` property to read the data from the entry.
     *   })
     *   .on('end', function() {
     *     // All entries retrieved.
     *   });
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * log.getEntriesStream()
     *   .on('data', function(entry) {
     *     this.end();
     *   });
     */
    getEntriesStream(options: GetEntriesRequest): import("stream").Duplex;
    info(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    info(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    info(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    notice(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    notice(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    notice(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    warning(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    warning(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    warning(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    write(entry: Entry | Entry[], options?: WriteOptions): Promise<ApiResponse>;
    write(entry: Entry | Entry[], options: WriteOptions, callback: ApiResponseCallback): void;
    write(entry: Entry | Entry[], callback: ApiResponseCallback): void;
    /**
     * All entries are passed through here in order to get them serialized.
     *
     * @private
     *
     * @param {object[]} entries - Entry objects.
     * @returns {object[]} Serialized entries.
     * @throws if there is an error during serialization.
     */
    decorateEntries_(entries: Entry[]): EntryJson[];
    /**
     * Truncate log entries at maxEntrySize, so that error is not thrown, see:
     * https://cloud.google.com/logging/quotas
     *
     * @private
     *
     * @param {object|string} the JSON log entry.
     * @returns {object|string} truncated JSON log entry.
     */
    private truncateEntries;
    /**
     * Return an array of log entries with the desired severity assigned.
     *
     * @private
     *
     * @param {object|object[]} entries - Log entries.
     * @param {string} severity - The desired severity level.
     */
    static assignSeverityToEntries_(entries: Entry | Entry[], severity: string): Entry[];
    /**
     * Format the name of a log. A log's full name is in the format of
     * 'projects/{projectId}/logs/{logName}'.
     *
     * @private
     *
     * @returns {string}
     */
    static formatName_(projectId: string, name: string): string;
}
/**
 * Reference to the {@link Log} class.
 * @name module:@google-cloud/logging.Log
 * @see Log
 */
export { Log };
