"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortJsonObject = exports.isJsonEqual = exports.request = exports.toArray = exports.stringify = exports.clone = exports.values = exports.deprecate = void 0;
const https = require("https");
const logger_1 = require("./logger");
/** @hidden */
exports.deprecate = (feature, alternative) => logger_1.getLogger().info(`${feature} is *DEPRECATED*: ${alternative}`);
/** @hidden */
exports.values = (o) => Object.keys(o).map(k => o[k]);
/** @hidden */
exports.clone = (o) => JSON.parse(JSON.stringify(o));
/** @hidden */
// tslint:disable-next-line:no-any root can be anything
exports.stringify = (root, ...exclude) => {
    const excluded = new Set(exclude);
    const filtered = Object.keys(root).reduce((o, k) => {
        if (excluded.has(k)) {
            o[k] = '[Excluded]';
            return o;
        }
        const value = root[k];
        try {
            JSON.stringify(value);
            o[k] = value;
            return o;
        }
        catch (e) {
            const { message = '' } = e;
            o[k] = message.includes('Converting circular structure to JSON') ?
                '[Circular]' : `[Stringify Error] ${e}`;
            return o;
        }
    }, {});
    return JSON.stringify(filtered, null, 2);
};
/** @hidden */
exports.toArray = (a) => Array.isArray(a) ? a : [a];
// Bind this to https to ensure its not implementation dependent
/** @hidden */
exports.request = https.request.bind(https);
/** @hidden */
exports.isJsonEqual = (o1, o2) => {
    const so1 = exports.sortJsonObject(o1);
    const so2 = exports.sortJsonObject(o2);
    return exports.stringify(so1) === exports.stringify(so2);
};
/** @hidden */
exports.sortJsonObject = (unsortedJson) => {
    if (typeof unsortedJson !== 'object' || unsortedJson === null) {
        return unsortedJson;
    }
    // Get a list of keys from the unsorted object
    const keys = [];
    Object.keys(unsortedJson).forEach(key => {
        keys.push(key);
    });
    keys.sort();
    // Add the keys to the sorted object in order
    const sortedJson = {};
    for (const key of keys) {
        // tslint:disable-next-line:no-any JSON value can be anything
        let value = unsortedJson[key];
        if (typeof value === 'object') {
            value = exports.sortJsonObject(value);
        }
        sortedJson[key] = value;
    }
    return sortedJson;
};
//# sourceMappingURL=common.js.map