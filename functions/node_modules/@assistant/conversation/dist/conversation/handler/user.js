"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
class User {
    /**
     * Constructor.
     *
     * @param input The [[Schema.User]] object wrapped by the new instance.
     * @hidden
     */
    constructor(input = {}) {
        Object.assign(this, input);
        const { locale = '', params = {} } = input;
        this.locale = locale;
        this.params = params;
    }
    /**
     * Extracts credentials from an authorization header, saving the values in {@link User.params}.
     * If a client ID is passed, validates and decode the authHeader as a GSI token.
     * If not, extract the token value from the header (if the header contains a bearer token).
     *
     * @param authHeader The header to process.
     * @param processor An instance of {@link AuthHeaderProcessor}
     * @param clientId The client ID to use to validate a GSI token.
     * @returns The updated {@link User} object.
     *
     * @hidden
     */
    async processAuthHeader(authHeader, processor, clientId) {
        if (clientId) {
            this.params.tokenPayload = await processor.decodeGSIToken(authHeader, clientId);
            return this;
        }
        else {
            this.params.bearerToken = processor.extractAccessToken(authHeader);
            return this;
        }
    }
}
exports.User = User;
//# sourceMappingURL=user.js.map