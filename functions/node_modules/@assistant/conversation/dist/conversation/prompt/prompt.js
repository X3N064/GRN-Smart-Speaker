"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prompt = void 0;
const simple_1 = require("./simple");
const suggestion_1 = require("./suggestion");
const canvas_1 = require("./canvas");
const link_1 = require("./content/link");
const content_1 = require("./content/content");
const card_1 = require("./content/card");
const collection_1 = require("./content/collection");
const collectionBrowse_1 = require("./content/collectionBrowse");
const image_1 = require("./content/image");
const list_1 = require("./content/list");
const media_1 = require("./content/media");
const table_1 = require("./content/table");
const order_1 = require("./content/order");
const addSimple = (prompt, simple) => {
    if (prompt.firstSimple && prompt.lastSimple) {
        throw new Error('Error adding simple response: Two simple responses already defined');
    }
    if (prompt.firstSimple && !prompt.lastSimple) {
        prompt.lastSimple = new simple_1.Simple(simple);
    }
    if (!prompt.firstSimple && !prompt.lastSimple) {
        prompt.firstSimple = new simple_1.Simple(simple);
    }
    if (!prompt.firstSimple && prompt.lastSimple) {
        prompt.firstSimple = new simple_1.Simple(simple);
    }
};
const appendFirstSimple = (prompt, speech) => {
    if (!prompt.firstSimple) {
        prompt.firstSimple = new simple_1.Simple(speech);
    }
    else {
        prompt.firstSimple.speech += speech;
    }
};
const addSuggestion = (prompt, suggestion) => {
    if (!prompt.suggestions) {
        prompt.suggestions = [];
    }
    // Maximum of 8 suggestions
    // https://developers.google.com/assistant/conversational/prompts#suggestions
    if (prompt.suggestions.length >= 8) {
        throw new Error('Error adding suggestion: Max number of suggestion (8) already added.');
    }
    else {
        prompt.suggestions.push(suggestion);
    }
};
class Prompt {
    /** @hidden */
    constructor(input = {}) {
        const { override = false, content = null, firstSimple = null, lastSimple = null, link = null, suggestions = null, canvas = null, orderUpdate = null, } = input;
        this.override = override;
        if (content) {
            this.content = new content_1.Content(content);
        }
        if (firstSimple) {
            this.firstSimple = new simple_1.Simple(firstSimple);
        }
        if (lastSimple) {
            this.lastSimple = new simple_1.Simple(lastSimple);
        }
        if (link) {
            this.link = new link_1.Link(link);
        }
        if (suggestions) {
            for (const suggestion of suggestions) {
                addSuggestion(this, new suggestion_1.Suggestion(suggestion));
            }
        }
        if (canvas) {
            this.canvas = new canvas_1.Canvas(canvas);
        }
        if (orderUpdate) {
            this.orderUpdate = new order_1.OrderUpdate(orderUpdate);
        }
    }
    append(item) {
        if (typeof item === 'string') {
            appendFirstSimple(this, item);
        }
        else {
            throw new Error('append only supports strings');
        }
        return this;
    }
    add(...items) {
        for (const item of items) {
            if (typeof item === 'string') {
                addSimple(this, new simple_1.Simple(item));
                continue;
            }
            if (item instanceof content_1.Content) {
                this.content = item;
                continue;
            }
            if (item instanceof card_1.Card) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.card = item;
                continue;
            }
            if (item instanceof collection_1.Collection) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.collection = item;
                continue;
            }
            if (item instanceof collectionBrowse_1.CollectionBrowse) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.collectionBrowse = item;
                continue;
            }
            if (item instanceof canvas_1.Canvas) {
                this.canvas = item;
                continue;
            }
            if (item instanceof image_1.Image) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.image = item;
                continue;
            }
            if (item instanceof list_1.List) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.list = item;
                continue;
            }
            if (item instanceof media_1.Media) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.media = item;
                continue;
            }
            if (item instanceof table_1.Table) {
                if (!this.content) {
                    this.content = new content_1.Content({});
                }
                this.content.table = item;
                continue;
            }
            if (item instanceof simple_1.Simple) {
                addSimple(this, item);
                continue;
            }
            if (item instanceof link_1.Link) {
                this.link = item;
                continue;
            }
            if (item instanceof order_1.OrderUpdate) {
                this.orderUpdate = item;
                continue;
            }
            if (item instanceof suggestion_1.Suggestion) {
                addSuggestion(this, item);
                continue;
            }
        }
        return this;
    }
}
exports.Prompt = Prompt;
//# sourceMappingURL=prompt.js.map