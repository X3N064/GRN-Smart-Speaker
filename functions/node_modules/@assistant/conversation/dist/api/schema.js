"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderUpdateType = exports.TicketEventType = exports.EventCharacterType = exports.PurchaseLocationType = exports.ErrorType = exports.PaymentMethodProvenance = exports.PaymentType = exports.ReservationType = exports.ReservationStatus = exports.Unit = exports.PurchaseType = exports.PurchaseStatus = exports.PickupType = exports.CurbsideFulfillmentType = exports.CheckInType = exports.FulfillmentType = exports.PriceAttributeType = exports.State = exports.FollowUpActionType = exports.URLTypeHint = exports.PresentationRequirement = exports.Align = exports.RepeatMode = exports.OptionalMediaControl = exports.MediaType = exports.ImageFill = exports.VerificationStatus = exports.Permission = exports.SkuType = exports.AccountLinkingStatus = exports.Hint = exports.Mode = exports.SlotFillingStatus = exports.SlotStatus = exports.SlotMode = exports.Capability = void 0;
var Capability;
(function (Capability) {
    Capability["InteractiveCanvas"] = "INTERACTIVE_CANVAS";
    Capability["LongFormAudio"] = "LONG_FORM_AUDIO";
    Capability["RichResponse"] = "RICH_RESPONSE";
    Capability["Speech"] = "SPEECH";
    Capability["Unspecified"] = "UNSPECIFIED";
    Capability["WebLink"] = "WEB_LINK";
    Capability["HomeStorage"] = "HOME_STORAGE";
})(Capability = exports.Capability || (exports.Capability = {}));
var SlotMode;
(function (SlotMode) {
    SlotMode["ModeUnspecified"] = "MODE_UNSPECIFIED";
    SlotMode["Optional"] = "OPTIONAL";
    SlotMode["Required"] = "REQUIRED";
})(SlotMode = exports.SlotMode || (exports.SlotMode = {}));
var SlotStatus;
(function (SlotStatus) {
    SlotStatus["SlotUnspecified"] = "SLOT_UNSPECIFIED";
    SlotStatus["Empty"] = "EMPTY";
    SlotStatus["Invalid"] = "INVALID";
    SlotStatus["Filled"] = "FILLED";
})(SlotStatus = exports.SlotStatus || (exports.SlotStatus = {}));
/**
 * Required. The current status of slot filling. This field is read-only.
 */
var SlotFillingStatus;
(function (SlotFillingStatus) {
    SlotFillingStatus["Collecting"] = "COLLECTING";
    SlotFillingStatus["Final"] = "FINAL";
    SlotFillingStatus["Initialized"] = "INITIALIZED";
    SlotFillingStatus["Unspecified"] = "UNSPECIFIED";
})(SlotFillingStatus = exports.SlotFillingStatus || (exports.SlotFillingStatus = {}));
/**
 * Required. How this type should be merged with other type values.
 */
var Mode;
(function (Mode) {
    Mode["TypeMerge"] = "TYPE_MERGE";
    Mode["TypeReplace"] = "TYPE_REPLACE";
    Mode["TypeUnspecified"] = "TYPE_UNSPECIFIED";
})(Mode = exports.Mode || (exports.Mode = {}));
/**
 * Indicates a hint for the url type.
 */
var Hint;
(function (Hint) {
    Hint["Amp"] = "AMP";
    Hint["LinkUnspecified"] = "LINK_UNSPECIFIED";
})(Hint = exports.Hint || (exports.Hint = {}));
/**
 * Whether the user account is linked to the app.
 */
var AccountLinkingStatus;
(function (AccountLinkingStatus) {
    AccountLinkingStatus["AccountLinkingStatusUnspecified"] = "ACCOUNT_LINKING_STATUS_UNSPECIFIED";
    AccountLinkingStatus["Linked"] = "LINKED";
    AccountLinkingStatus["NotLinked"] = "NOT_LINKED";
})(AccountLinkingStatus = exports.AccountLinkingStatus || (exports.AccountLinkingStatus = {}));
/**
 * The type of SKU.
 */
var SkuType;
(function (SkuType) {
    SkuType["App"] = "APP";
    SkuType["InApp"] = "IN_APP";
    SkuType["SkuTypeUnspecified"] = "SKU_TYPE_UNSPECIFIED";
    SkuType["Subscription"] = "SUBSCRIPTION";
})(SkuType = exports.SkuType || (exports.SkuType = {}));
var Permission;
(function (Permission) {
    Permission["DeviceCoarseLocation"] = "DEVICE_COARSE_LOCATION";
    Permission["DevicePreciseLocation"] = "DEVICE_PRECISE_LOCATION";
    Permission["PermissionUnspecified"] = "PERMISSION_UNSPECIFIED";
    Permission["Update"] = "UPDATE";
})(Permission = exports.Permission || (exports.Permission = {}));
/**
 * Indicates the verification status of the user.
 */
var VerificationStatus;
(function (VerificationStatus) {
    VerificationStatus["Guest"] = "GUEST";
    VerificationStatus["UserVerificationStatusUnspecified"] = "USER_VERIFICATION_STATUS_UNSPECIFIED";
    VerificationStatus["Verified"] = "VERIFIED";
})(VerificationStatus = exports.VerificationStatus || (exports.VerificationStatus = {}));
/**
 * How the image background will be filled. Optional.
 *
 * How the image backgrounds of collection items will be filled. Optional.
 *
 * Type of image display option.
 */
var ImageFill;
(function (ImageFill) {
    ImageFill["Cropped"] = "CROPPED";
    ImageFill["Gray"] = "GRAY";
    ImageFill["Unspecified"] = "UNSPECIFIED";
    ImageFill["White"] = "WHITE";
})(ImageFill = exports.ImageFill || (exports.ImageFill = {}));
var MediaType;
(function (MediaType) {
    MediaType["Audio"] = "AUDIO";
    MediaType["MediaStatusACK"] = "MEDIA_STATUS_ACK";
    MediaType["MediaTypeUnspecified"] = "MEDIA_TYPE_UNSPECIFIED";
})(MediaType = exports.MediaType || (exports.MediaType = {}));
var OptionalMediaControl;
(function (OptionalMediaControl) {
    OptionalMediaControl["OptionalMediaControlsUnspecified"] = "OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED";
    OptionalMediaControl["Paused"] = "PAUSED";
    OptionalMediaControl["Stopped"] = "STOPPED";
})(OptionalMediaControl = exports.OptionalMediaControl || (exports.OptionalMediaControl = {}));
/**
 * Repeat mode for the list of Media Objects.
 */
var RepeatMode;
(function (RepeatMode) {
    RepeatMode["All"] = "ALL";
    RepeatMode["Off"] = "OFF";
    RepeatMode["RepeatModeUnspecified"] = "REPEAT_MODE_UNSPECIFIED";
})(RepeatMode = exports.RepeatMode || (exports.RepeatMode = {}));
/**
 * Horizontal alignment of content w.r.t column. If unspecified, content will be aligned to
 * the leading edge.
 */
var Align;
(function (Align) {
    Align["Center"] = "CENTER";
    Align["Leading"] = "LEADING";
    Align["Trailing"] = "TRAILING";
    Align["Unspecified"] = "UNSPECIFIED";
})(Align = exports.Align || (exports.Align = {}));
/**
 * Presentation requirement of the disclosure.
 */
var PresentationRequirement;
(function (PresentationRequirement) {
    PresentationRequirement["RequirementOptional"] = "REQUIREMENT_OPTIONAL";
    PresentationRequirement["RequirementRequired"] = "REQUIREMENT_REQUIRED";
    PresentationRequirement["RequirementUnspecified"] = "REQUIREMENT_UNSPECIFIED";
})(PresentationRequirement = exports.PresentationRequirement || (exports.PresentationRequirement = {}));
/**
 * Indicates a hint for the url type.
 */
var URLTypeHint;
(function (URLTypeHint) {
    URLTypeHint["AmpContent"] = "AMP_CONTENT";
    URLTypeHint["URLTypeHintUnspecified"] = "URL_TYPE_HINT_UNSPECIFIED";
})(URLTypeHint = exports.URLTypeHint || (exports.URLTypeHint = {}));
/**
 * Required: Type of action.
 */
var FollowUpActionType;
(function (FollowUpActionType) {
    FollowUpActionType["Call"] = "CALL";
    FollowUpActionType["Cancel"] = "CANCEL";
    FollowUpActionType["CustomerService"] = "CUSTOMER_SERVICE";
    FollowUpActionType["Direction"] = "DIRECTION";
    FollowUpActionType["Email"] = "EMAIL";
    FollowUpActionType["Exchange"] = "EXCHANGE";
    FollowUpActionType["FixIssue"] = "FIX_ISSUE";
    FollowUpActionType["Modify"] = "MODIFY";
    FollowUpActionType["Reorder"] = "REORDER";
    FollowUpActionType["Return"] = "RETURN";
    FollowUpActionType["Review"] = "REVIEW";
    FollowUpActionType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    FollowUpActionType["ViewDetails"] = "VIEW_DETAILS";
})(FollowUpActionType = exports.FollowUpActionType || (exports.FollowUpActionType = {}));
/**
 * Required: State of the price: Estimate vs Actual.
 */
var State;
(function (State) {
    State["Actual"] = "ACTUAL";
    State["Estimate"] = "ESTIMATE";
    State["StateUnspecified"] = "STATE_UNSPECIFIED";
})(State = exports.State || (exports.State = {}));
/**
 * Required: Type of money attribute.
 */
var PriceAttributeType;
(function (PriceAttributeType) {
    PriceAttributeType["Delivery"] = "DELIVERY";
    PriceAttributeType["Discount"] = "DISCOUNT";
    PriceAttributeType["Fee"] = "FEE";
    PriceAttributeType["Gratuity"] = "GRATUITY";
    PriceAttributeType["Regular"] = "REGULAR";
    PriceAttributeType["Subtotal"] = "SUBTOTAL";
    PriceAttributeType["Tax"] = "TAX";
    PriceAttributeType["Total"] = "TOTAL";
    PriceAttributeType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
})(PriceAttributeType = exports.PriceAttributeType || (exports.PriceAttributeType = {}));
/**
 * Required: The type of fulfillment.
 */
var FulfillmentType;
(function (FulfillmentType) {
    FulfillmentType["Delivery"] = "DELIVERY";
    FulfillmentType["Pickup"] = "PICKUP";
    FulfillmentType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
})(FulfillmentType = exports.FulfillmentType || (exports.FulfillmentType = {}));
/**
 * Method used to send checkin instructions.
 */
var CheckInType;
(function (CheckInType) {
    CheckInType["CheckInTypeUnspecified"] = "CHECK_IN_TYPE_UNSPECIFIED";
    CheckInType["Email"] = "EMAIL";
    CheckInType["SMS"] = "SMS";
})(CheckInType = exports.CheckInType || (exports.CheckInType = {}));
/**
 * Partners need additional information to facilitate curbside pickup orders. Depending upon
 * what fulfillment type is chosen, corresponding details would be collected from the user.
 */
var CurbsideFulfillmentType;
(function (CurbsideFulfillmentType) {
    CurbsideFulfillmentType["Unspecified"] = "UNSPECIFIED";
    CurbsideFulfillmentType["VehicleDetail"] = "VEHICLE_DETAIL";
})(CurbsideFulfillmentType = exports.CurbsideFulfillmentType || (exports.CurbsideFulfillmentType = {}));
/**
 * Pick up method, such as INSTORE, CURBSIDE etc.
 */
var PickupType;
(function (PickupType) {
    PickupType["Curbside"] = "CURBSIDE";
    PickupType["Instore"] = "INSTORE";
    PickupType["Unspecified"] = "UNSPECIFIED";
})(PickupType = exports.PickupType || (exports.PickupType = {}));
/**
 * Required: Line item level status.
 *
 * Required: Overall Status for the order.
 */
var PurchaseStatus;
(function (PurchaseStatus) {
    PurchaseStatus["Cancelled"] = "CANCELLED";
    PurchaseStatus["ChangeRequested"] = "CHANGE_REQUESTED";
    PurchaseStatus["Confirmed"] = "CONFIRMED";
    PurchaseStatus["Created"] = "CREATED";
    PurchaseStatus["Delivered"] = "DELIVERED";
    PurchaseStatus["InPreparation"] = "IN_PREPARATION";
    PurchaseStatus["OutOfStock"] = "OUT_OF_STOCK";
    PurchaseStatus["PurchaseStatusUnspecified"] = "PURCHASE_STATUS_UNSPECIFIED";
    PurchaseStatus["ReadyForPickup"] = "READY_FOR_PICKUP";
    PurchaseStatus["Rejected"] = "REJECTED";
    PurchaseStatus["Returned"] = "RETURNED";
    PurchaseStatus["Shipped"] = "SHIPPED";
})(PurchaseStatus = exports.PurchaseStatus || (exports.PurchaseStatus = {}));
/**
 * Required: Type of purchase.
 */
var PurchaseType;
(function (PurchaseType) {
    PurchaseType["Food"] = "FOOD";
    PurchaseType["Grocery"] = "GROCERY";
    PurchaseType["MobileRecharge"] = "MOBILE_RECHARGE";
    PurchaseType["PurchaseTypeUnspecified"] = "PURCHASE_TYPE_UNSPECIFIED";
    PurchaseType["Retail"] = "RETAIL";
})(PurchaseType = exports.PurchaseType || (exports.PurchaseType = {}));
/**
 * Unit: Example POUND, GRAM.
 */
var Unit;
(function (Unit) {
    Unit["Gram"] = "GRAM";
    Unit["Kilogram"] = "KILOGRAM";
    Unit["Milligram"] = "MILLIGRAM";
    Unit["Ounce"] = "OUNCE";
    Unit["Pound"] = "POUND";
    Unit["UnitUnspecified"] = "UNIT_UNSPECIFIED";
})(Unit = exports.Unit || (exports.Unit = {}));
/**
 * Required: Reservation status.
 */
var ReservationStatus;
(function (ReservationStatus) {
    ReservationStatus["Cancelled"] = "CANCELLED";
    ReservationStatus["ChangeRequested"] = "CHANGE_REQUESTED";
    ReservationStatus["Confirmed"] = "CONFIRMED";
    ReservationStatus["Fulfilled"] = "FULFILLED";
    ReservationStatus["Pending"] = "PENDING";
    ReservationStatus["Rejected"] = "REJECTED";
    ReservationStatus["ReservationStatusUnspecified"] = "RESERVATION_STATUS_UNSPECIFIED";
})(ReservationStatus = exports.ReservationStatus || (exports.ReservationStatus = {}));
/**
 * Type of reservation. May be unset if none of the type options is applicable.
 */
var ReservationType;
(function (ReservationType) {
    ReservationType["Hairdresser"] = "HAIRDRESSER";
    ReservationType["ReservationTypeUnspecified"] = "RESERVATION_TYPE_UNSPECIFIED";
    ReservationType["Restaurant"] = "RESTAURANT";
})(ReservationType = exports.ReservationType || (exports.ReservationType = {}));
/**
 * The type of the payment.
 */
var PaymentType;
(function (PaymentType) {
    PaymentType["Bank"] = "BANK";
    PaymentType["Cash"] = "CASH";
    PaymentType["GiftCard"] = "GIFT_CARD";
    PaymentType["LoyaltyProgram"] = "LOYALTY_PROGRAM";
    PaymentType["PaymentCard"] = "PAYMENT_CARD";
    PaymentType["PaymentTypeUnspecified"] = "PAYMENT_TYPE_UNSPECIFIED";
    PaymentType["Wallet"] = "WALLET";
})(PaymentType = exports.PaymentType || (exports.PaymentType = {}));
/**
 * Provenance of the payment method used for the transaction. User may have registered the
 * same payment method with both google and merchant.
 */
var PaymentMethodProvenance;
(function (PaymentMethodProvenance) {
    PaymentMethodProvenance["PaymentMethodProvenanceGoogle"] = "PAYMENT_METHOD_PROVENANCE_GOOGLE";
    PaymentMethodProvenance["PaymentMethodProvenanceMerchant"] = "PAYMENT_METHOD_PROVENANCE_MERCHANT";
    PaymentMethodProvenance["PaymentMethodProvenanceUnspecified"] = "PAYMENT_METHOD_PROVENANCE_UNSPECIFIED";
})(PaymentMethodProvenance = exports.PaymentMethodProvenance || (exports.PaymentMethodProvenance = {}));
/**
 * Required: This represents the granular reason why an order gets rejected by the merchant.
 */
var ErrorType;
(function (ErrorType) {
    ErrorType["AccountLinkingFailed"] = "ACCOUNT_LINKING_FAILED";
    ErrorType["AvailabilityChanged"] = "AVAILABILITY_CHANGED";
    ErrorType["Closed"] = "CLOSED";
    ErrorType["ErrorTypeUnspecified"] = "ERROR_TYPE_UNSPECIFIED";
    ErrorType["FailedPrecondition"] = "FAILED_PRECONDITION";
    ErrorType["IncorrectPrice"] = "INCORRECT_PRICE";
    ErrorType["Ineligible"] = "INELIGIBLE";
    ErrorType["Invalid"] = "INVALID";
    ErrorType["MerchantUnreachable"] = "MERCHANT_UNREACHABLE";
    ErrorType["NoCapacity"] = "NO_CAPACITY";
    ErrorType["NoCourierAvailable"] = "NO_COURIER_AVAILABLE";
    ErrorType["NotFound"] = "NOT_FOUND";
    ErrorType["OutOfServiceArea"] = "OUT_OF_SERVICE_AREA";
    ErrorType["PaymentDeclined"] = "PAYMENT_DECLINED";
    ErrorType["PriceChanged"] = "PRICE_CHANGED";
    ErrorType["PromoExpired"] = "PROMO_EXPIRED";
    ErrorType["PromoNotApplicable"] = "PROMO_NOT_APPLICABLE";
    ErrorType["PromoNotRecognized"] = "PROMO_NOT_RECOGNIZED";
    ErrorType["PromoOrderIneligible"] = "PROMO_ORDER_INELIGIBLE";
    ErrorType["PromoUserIneligible"] = "PROMO_USER_INELIGIBLE";
    ErrorType["RequirementsNotMet"] = "REQUIREMENTS_NOT_MET";
    ErrorType["TooLate"] = "TOO_LATE";
    ErrorType["UnavailableSlot"] = "UNAVAILABLE_SLOT";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
/**
 * Location of the purchase (in-store / online)
 */
var PurchaseLocationType;
(function (PurchaseLocationType) {
    PurchaseLocationType["InstorePurchase"] = "INSTORE_PURCHASE";
    PurchaseLocationType["OnlinePurchase"] = "ONLINE_PURCHASE";
    PurchaseLocationType["UnspecifiedLocation"] = "UNSPECIFIED_LOCATION";
})(PurchaseLocationType = exports.PurchaseLocationType || (exports.PurchaseLocationType = {}));
/**
 * Type of the event character, e.g. actor or director.
 */
var EventCharacterType;
(function (EventCharacterType) {
    EventCharacterType["Actor"] = "ACTOR";
    EventCharacterType["Director"] = "DIRECTOR";
    EventCharacterType["Organizer"] = "ORGANIZER";
    EventCharacterType["Performer"] = "PERFORMER";
    EventCharacterType["TypeUnknown"] = "TYPE_UNKNOWN";
})(EventCharacterType = exports.EventCharacterType || (exports.EventCharacterType = {}));
/**
 * Required: Type of the ticket event, e.g. movie, concert.
 */
var TicketEventType;
(function (TicketEventType) {
    TicketEventType["Concert"] = "CONCERT";
    TicketEventType["EventTypeUnknown"] = "EVENT_TYPE_UNKNOWN";
    TicketEventType["Movie"] = "MOVIE";
    TicketEventType["Sports"] = "SPORTS";
})(TicketEventType = exports.TicketEventType || (exports.TicketEventType = {}));
/**
 * Deprecated: Use OrderUpdate.update_mask instead. If type = SNAPSHOT, OrderUpdate.order
 * should be the entire order. If type = ORDER_STATUS, this is the order level status
 * change. Only order.last_update_time and this vertical status are picked up. Note:
 * type.ORDER_STATUS only supports PurcahaseOrderExtension status updates and there is no
 * plan to extend this support. Instead, we recommend using update_mask as it is more
 * generic, extensible and can be used for all verticals.
 */
var OrderUpdateType;
(function (OrderUpdateType) {
    OrderUpdateType["OrderStatus"] = "ORDER_STATUS";
    OrderUpdateType["Snapshot"] = "SNAPSHOT";
    OrderUpdateType["TypeUnspecified"] = "TYPE_UNSPECIFIED";
})(OrderUpdateType = exports.OrderUpdateType || (exports.OrderUpdateType = {}));
//# sourceMappingURL=schema.js.map